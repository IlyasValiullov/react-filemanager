import React, { Component } from 'react';
// const { PropTypes }  = React;
import PropTypes from 'prop-types';
import './filemanager.css';
import { Tree } from './tree';
import { Preview } from './preview';
import { connect } from 'react-redux';
// import * as types from "../store/tree/actionTypes";
import * as types from "../store/aws/actionTypes";
import {  getSelectedFile, getSelectedNode, getSelectedAwsFile, isFolder} from "../store/tree/reducer";
import * as treeActions from '../store/tree/actions';

class FileManagerCore extends Component {

    constructor(props) {
        super(props);
        this.state = {
            showUploadPanel: false
        };
        this.props.dispatch({ type: types.FILEMANAGER_MOUNTED, auth_url: this.props.auth_url });
    }

    closeWindow = () => {
        if (typeof this.props.closeFileManager === 'function') {
            this.props.closeFileManager();
        }
    };

    setShowUploadPanel = () => {
        this.setState({
            showUploadPanel: !this.state.showUploadPanel
        })
    };

    hideUploadPanel = () => {
        this.setState({
            showUploadPanel: false
        })
    };

    selectFile = () => {
        this.props.selectFile(this.props.selected_aws_file);
    }

    setShowMoveDialog = () => {
        console.log("set show move dialog");
    }

    deleteFile = () => {
        console.log("delete file", this.props.selectedFile);
        this.props.dispatch(treeActions.deleteFile(this.props.selectedNode));
    }

    canSelect = () => {
        return this.props.selectedFile !== null && !this.props.selectedNode.isFolder;
    }
    canUpload = () => {
        return this.props.isFolder;
        // return true;
    }
    canMove = () => {
        return this.props.selectedFile !== null && !this.props.selectedNode.isFolder;
    }
    canDelete = () => {
        return true;
    }

    refresh = () => {
        this.props.dispatch(treeActions.fetchDirs());
    }

    render() {
        return (
            <div id="myModal" className="my_modal">
                <div className="my-modal-content">
                    <div className="modal-content">
                        <div className="modal-header">
                            <button type="button" disabled={!this.canSelect()} onClick={this.selectFile}>
                                Select
                            </button>

                            <button type="button" onClick={this.refresh}>
                                Refresh
                            </button>

                            <button type="button" disabled={!this.canUpload()} onClick={this.setShowUploadPanel}>
                                Upload
                            </button>

                            {/*<button type="button" disabled={!this.canMove()} onClick={this.setShowMoveDialog}>*/}
                                {/*Move*/}
                            {/*</button>*/}

                            <button type="button" disabled={!this.canDelete()} onClick={this.deleteFile}>
                                Delete
                            </button>

                            <button type="button" className="close" onClick={this.closeWindow}>
                                <span className="close">&times;</span>
                            </button>
                            {/*<div className="container-fluid">*/}
                            {/*<div className="navbar-header">*/}
                            {/*<a className="navbar-brand" href="#">*/}
                            {/*<h3>Bob</h3>*/}
                            {/*</a>*/}
                            {/*</div>*/}
                            {/*</div>*/}
                        </div>
                        <div className="modal-body">
                            <div className="layout row">
                                <Tree className="flex" selectFile={this.selectFile}/>
                                <Preview className="flex"
                                         setShowUploadPanel={this.setShowUploadPanel}
                                         hideUploadPanel={this.hideUploadPanel}
                                         showUploadPanel={this.state.showUploadPanel}
                                />
                            </div>
                        </div>
                    </div>
                </div>
            </div>

    //         <div className = "modal-content" >
    //         <div className = "modal-header" >
    //         < button
    //     type = "button"
    //     className = "close"
    //     data - dismiss = "modal"
    //     aria - label = "Close" >
    //         < span
    //     aria - hidden = "true" > & times;
    // </span>
    // </button>
    //     <h3 className="modal-title">New Product Alert!</h3>
    // </div>
    //     <div className="modal-body">
    //         <h4>Codebrainery Wizard</h4>
    //         <p>Sign up today for tons of new, in-depth web development training, and live support from our team of
    //             Codebrainery CodeGuides.</p>
    //     </div>
    //     <div className="modal-footer">
    //         <button type="button" className="btn btn-primary">Try it now</button>
    //         <button type="button" className="btn btn-secondary" data-dismiss="modal">Maybe later</button>
    //     </div>
    // </div>

            // <div>
            //     <h1>File manager</h1>
            //     <img src="https://imagejournal.org/wp-content/uploads/2018/04/6476778709_fbb520cc80_o-300x225.jpg"/>
            // </div>
        );
    }
}

// FileManager.propTypes = {
//     closeFileManager: PropTypes.func
// };

function mapStateToProps(state) {
    return {
        // selectedNode: treeSelectors.getSelectedNode(state),
        selected_aws_file: getSelectedAwsFile(state),
        isFolder: isFolder(state.tree),
        selectedFile: getSelectedFile(state.tree),
        selectedNode: getSelectedNode(state.tree)
    }
}

export default connect(mapStateToProps)(FileManagerCore);