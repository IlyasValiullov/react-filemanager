import React, { Component } from 'react';
import { Item } from '.';
import './tree.css'
import { connect } from 'react-redux';
import * as treeActions from '../../store/tree/actions';
import * as treeTypes from '../../store/tree/actionTypes';
import { getDirs, getSelectedFile } from "../../store/tree/reducer";

class Tree extends Component {

    constructor(props) {
        super(props);
    }

    componentDidMount() {
        this.updateTree();
    }


    // closeWindow = () => {
    //     console.log('close clicked');
    //     if (typeof this.props.closeFileManager === 'function') {
    //         console.log('is function');
    //         this.props.closeFileManager();
    //     }
    // };

    updateTree = () => {
        // this.props.dispatch();
        // console.log("TreeComponent: updateTree");
        //this.props.dispatch()
        this.props.dispatch(treeActions.fetchDirs());
    };

    selectFile = (model) => {
        this.props.dispatch(treeActions.selectNode(model));
    };

    openNode = (model) => {
        this.props.dispatch(treeActions.openNode(model));
    };

    cleanSelect = () => {
        this.props.dispatch({type: treeTypes.CLEAN_SELECT });
    }

    renderItems = () => {
        return this.props.dirs.map((item, index) => (
            <Item className="item" key={ item.id } selectedFile={this.props.selectedFile} openFile={this.openNode} selectFile={this.selectFile} model={ item }/>
        ));
    };

    render() {
        return (
            <ul className="scroll_list first_child_margin col-3">
                { this.renderItems() }
            </ul>
        );
    };
}

// FileManager.propTypes = {
//     closeFileManager: PropTypes.func
// };

function mapStateToProps(state) {
    return {
        // selectedNode: treeSelectors.getSelectedNode(state),
        dirs: getDirs(state.tree),
        selectedFile: getSelectedFile(state.tree)
    }
}

export default connect(mapStateToProps)(Tree);
